{"ast":null,"code":"import { ANDROID_DISPLAY, ANDROID_MODE, MIN_MS } from \"./constants\";\nimport pickers from \"./picker\";\nimport { sharedPropsValidation } from \"./utils\";\nimport invariant from 'invariant';\nexport function getOpenPicker(_ref) {\n  var mode = _ref.mode,\n      value = _ref.value,\n      display = _ref.display,\n      is24Hour = _ref.is24Hour,\n      minimumDate = _ref.minimumDate,\n      maximumDate = _ref.maximumDate,\n      neutralButtonLabel = _ref.neutralButtonLabel,\n      minuteInterval = _ref.minuteInterval,\n      timeZoneOffsetInMinutes = _ref.timeZoneOffsetInMinutes;\n\n  switch (mode) {\n    case ANDROID_MODE.time:\n      return function () {\n        return pickers[mode].open({\n          value: value,\n          display: display,\n          minuteInterval: minuteInterval,\n          is24Hour: is24Hour,\n          neutralButtonLabel: neutralButtonLabel,\n          timeZoneOffsetInMinutes: timeZoneOffsetInMinutes\n        });\n      };\n\n    default:\n      return function () {\n        return pickers[ANDROID_MODE.date].open({\n          value: value,\n          display: display,\n          minimumDate: minimumDate,\n          maximumDate: maximumDate,\n          neutralButtonLabel: neutralButtonLabel,\n          timeZoneOffsetInMinutes: timeZoneOffsetInMinutes\n        });\n      };\n  }\n}\nexport function timeZoneOffsetDateSetter(date, timeZoneOffsetInMinutes) {\n  if (typeof timeZoneOffsetInMinutes === 'number') {\n    var offset = date.getTimezoneOffset() + timeZoneOffsetInMinutes;\n    var shiftedDate = new Date(date.getTime() - offset * MIN_MS);\n    return shiftedDate;\n  }\n\n  return date;\n}\nexport function validateAndroidProps(props) {\n  sharedPropsValidation({\n    value: props == null ? void 0 : props.value\n  });\n  var mode = props.mode,\n      display = props.display;\n  invariant(!(display === ANDROID_DISPLAY.calendar && mode === ANDROID_MODE.time) && !(display === ANDROID_DISPLAY.clock && mode === ANDROID_MODE.date), \"display: \" + display + \" and mode: \" + mode + \" cannot be used together.\");\n}","map":{"version":3,"sources":["C:/www/CyberBunker/node_modules/@react-native-community/datetimepicker/src/androidUtils.js"],"names":["ANDROID_DISPLAY","ANDROID_MODE","MIN_MS","pickers","sharedPropsValidation","invariant","getOpenPicker","mode","value","display","is24Hour","minimumDate","maximumDate","neutralButtonLabel","minuteInterval","timeZoneOffsetInMinutes","time","open","date","timeZoneOffsetDateSetter","offset","getTimezoneOffset","shiftedDate","Date","getTime","validateAndroidProps","props","calendar","clock"],"mappings":"AAIA,SAAQA,eAAR,EAAyBC,YAAzB,EAAuCC,MAAvC;AACA,OAAOC,OAAP;AAEA,SAAQC,qBAAR;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAgBA,OAAO,SAASC,aAAT,OAU2B;AAAA,MAThCC,IASgC,QAThCA,IASgC;AAAA,MARhCC,KAQgC,QARhCA,KAQgC;AAAA,MAPhCC,OAOgC,QAPhCA,OAOgC;AAAA,MANhCC,QAMgC,QANhCA,QAMgC;AAAA,MALhCC,WAKgC,QALhCA,WAKgC;AAAA,MAJhCC,WAIgC,QAJhCA,WAIgC;AAAA,MAHhCC,kBAGgC,QAHhCA,kBAGgC;AAAA,MAFhCC,cAEgC,QAFhCA,cAEgC;AAAA,MADhCC,uBACgC,QADhCA,uBACgC;;AAChC,UAAQR,IAAR;AACE,SAAKN,YAAY,CAACe,IAAlB;AACE,aAAO;AAAA,eAELb,OAAO,CAACI,IAAD,CAAP,CAAcU,IAAd,CAAmB;AACjBT,UAAAA,KAAK,EAALA,KADiB;AAEjBC,UAAAA,OAAO,EAAPA,OAFiB;AAGjBK,UAAAA,cAAc,EAAdA,cAHiB;AAIjBJ,UAAAA,QAAQ,EAARA,QAJiB;AAKjBG,UAAAA,kBAAkB,EAAlBA,kBALiB;AAMjBE,UAAAA,uBAAuB,EAAvBA;AANiB,SAAnB,CAFK;AAAA,OAAP;;AAUF;AACE,aAAO;AAAA,eAELZ,OAAO,CAACF,YAAY,CAACiB,IAAd,CAAP,CAA2BD,IAA3B,CAAgC;AAC9BT,UAAAA,KAAK,EAALA,KAD8B;AAE9BC,UAAAA,OAAO,EAAPA,OAF8B;AAG9BE,UAAAA,WAAW,EAAXA,WAH8B;AAI9BC,UAAAA,WAAW,EAAXA,WAJ8B;AAK9BC,UAAAA,kBAAkB,EAAlBA,kBAL8B;AAM9BE,UAAAA,uBAAuB,EAAvBA;AAN8B,SAAhC,CAFK;AAAA,OAAP;AAbJ;AAwBD;AAED,OAAO,SAASI,wBAAT,CACLD,IADK,EAELH,uBAFK,EAGC;AACN,MAAI,OAAOA,uBAAP,KAAmC,QAAvC,EAAiD;AAG/C,QAAMK,MAAM,GAAGF,IAAI,CAACG,iBAAL,KAA2BN,uBAA1C;AACA,QAAMO,WAAW,GAAG,IAAIC,IAAJ,CAASL,IAAI,CAACM,OAAL,KAAiBJ,MAAM,GAAGlB,MAAnC,CAApB;AACA,WAAOoB,WAAP;AACD;;AACD,SAAOJ,IAAP;AACD;AAED,OAAO,SAASO,oBAAT,CAA8BC,KAA9B,EAAyD;AAC9DtB,EAAAA,qBAAqB,CAAC;AAACI,IAAAA,KAAK,EAAEkB,KAAF,oBAAEA,KAAK,CAAElB;AAAf,GAAD,CAArB;AACA,MAAOD,IAAP,GAAwBmB,KAAxB,CAAOnB,IAAP;AAAA,MAAaE,OAAb,GAAwBiB,KAAxB,CAAajB,OAAb;AACAJ,EAAAA,SAAS,CACP,EAAEI,OAAO,KAAKT,eAAe,CAAC2B,QAA5B,IAAwCpB,IAAI,KAAKN,YAAY,CAACe,IAAhE,KACE,EAAEP,OAAO,KAAKT,eAAe,CAAC4B,KAA5B,IAAqCrB,IAAI,KAAKN,YAAY,CAACiB,IAA7D,CAFK,gBAGKT,OAHL,mBAG0BF,IAH1B,+BAAT;AAKD","sourcesContent":["/**\r\n * @format\r\n * @flow strict-local\r\n */\r\nimport {ANDROID_DISPLAY, ANDROID_MODE, MIN_MS} from './constants';\r\nimport pickers from './picker';\r\nimport type {AndroidNativeProps, DateTimePickerResult} from './types';\r\nimport {sharedPropsValidation} from './utils';\r\nimport invariant from 'invariant';\r\ntype PresentPickerCallback = () => Promise<DateTimePickerResult>;\r\n\r\ntype Timestamp = number;\r\n\r\ntype Params = {\r\n  value: Timestamp,\r\n  mode: AndroidNativeProps['mode'],\r\n  display: AndroidNativeProps['display'],\r\n  is24Hour: AndroidNativeProps['is24Hour'],\r\n  minimumDate: AndroidNativeProps['minimumDate'],\r\n  maximumDate: AndroidNativeProps['maximumDate'],\r\n  neutralButtonLabel: AndroidNativeProps['neutralButtonLabel'],\r\n  minuteInterval: AndroidNativeProps['minuteInterval'],\r\n  timeZoneOffsetInMinutes: AndroidNativeProps['timeZoneOffsetInMinutes'],\r\n};\r\nexport function getOpenPicker({\r\n  mode,\r\n  value,\r\n  display,\r\n  is24Hour,\r\n  minimumDate,\r\n  maximumDate,\r\n  neutralButtonLabel,\r\n  minuteInterval,\r\n  timeZoneOffsetInMinutes,\r\n}: Params): PresentPickerCallback {\r\n  switch (mode) {\r\n    case ANDROID_MODE.time:\r\n      return () =>\r\n        // $FlowFixMe - `AbstractComponent` [1] is not an instance type.\r\n        pickers[mode].open({\r\n          value,\r\n          display,\r\n          minuteInterval,\r\n          is24Hour,\r\n          neutralButtonLabel,\r\n          timeZoneOffsetInMinutes,\r\n        });\r\n    default:\r\n      return () =>\r\n        // $FlowFixMe - `AbstractComponent` [1] is not an instance type.\r\n        pickers[ANDROID_MODE.date].open({\r\n          value,\r\n          display,\r\n          minimumDate,\r\n          maximumDate,\r\n          neutralButtonLabel,\r\n          timeZoneOffsetInMinutes,\r\n        });\r\n  }\r\n}\r\n\r\nexport function timeZoneOffsetDateSetter(\r\n  date: Date,\r\n  timeZoneOffsetInMinutes: ?number,\r\n): Date {\r\n  if (typeof timeZoneOffsetInMinutes === 'number') {\r\n    // FIXME this causes a bug. repro: set tz offset to zero, and then keep opening and closing the calendar picker\r\n    // https://github.com/react-native-datetimepicker/datetimepicker/issues/528\r\n    const offset = date.getTimezoneOffset() + timeZoneOffsetInMinutes;\r\n    const shiftedDate = new Date(date.getTime() - offset * MIN_MS);\r\n    return shiftedDate;\r\n  }\r\n  return date;\r\n}\r\n\r\nexport function validateAndroidProps(props: AndroidNativeProps) {\r\n  sharedPropsValidation({value: props?.value});\r\n  const {mode, display} = props;\r\n  invariant(\r\n    !(display === ANDROID_DISPLAY.calendar && mode === ANDROID_MODE.time) &&\r\n      !(display === ANDROID_DISPLAY.clock && mode === ANDROID_MODE.date),\r\n    `display: ${display} and mode: ${mode} cannot be used together.`,\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}