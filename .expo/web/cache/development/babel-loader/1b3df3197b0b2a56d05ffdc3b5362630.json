{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { DATE_SET_ACTION, TIME_SET_ACTION, DISMISS_ACTION, NEUTRAL_BUTTON_ACTION, ANDROID_DISPLAY, ANDROID_MODE, ANDROID_EVT_TYPE, EVENT_TYPE_SET } from \"./constants\";\nimport invariant from 'invariant';\nimport { getOpenPicker, timeZoneOffsetDateSetter, validateAndroidProps } from \"./androidUtils\";\nimport pickers from \"./picker\";\n\nfunction open(props) {\n  var _props$mode = props.mode,\n      mode = _props$mode === void 0 ? ANDROID_MODE.date : _props$mode,\n      _props$display = props.display,\n      display = _props$display === void 0 ? ANDROID_DISPLAY.default : _props$display,\n      originalValue = props.value,\n      is24Hour = props.is24Hour,\n      minimumDate = props.minimumDate,\n      maximumDate = props.maximumDate,\n      neutralButtonLabel = props.neutralButtonLabel,\n      minuteInterval = props.minuteInterval,\n      timeZoneOffsetInMinutes = props.timeZoneOffsetInMinutes,\n      onChange = props.onChange,\n      onError = props.onError;\n  validateAndroidProps(props);\n  invariant(originalValue, 'A date or time must be specified as `value` prop.');\n  var valueTimestamp = originalValue.getTime();\n  var openPicker = getOpenPicker({\n    mode: mode,\n    value: valueTimestamp,\n    display: display,\n    is24Hour: is24Hour,\n    minimumDate: minimumDate,\n    maximumDate: maximumDate,\n    neutralButtonLabel: neutralButtonLabel,\n    minuteInterval: minuteInterval,\n    timeZoneOffsetInMinutes: timeZoneOffsetInMinutes\n  });\n\n  var presentPicker = function presentPicker() {\n    var _await$openPicker, action, day, month, year, minute, hour, date, event;\n\n    return _regeneratorRuntime.async(function presentPicker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(openPicker());\n\n          case 3:\n            _await$openPicker = _context.sent;\n            action = _await$openPicker.action;\n            day = _await$openPicker.day;\n            month = _await$openPicker.month;\n            year = _await$openPicker.year;\n            minute = _await$openPicker.minute;\n            hour = _await$openPicker.hour;\n            date = new Date(valueTimestamp);\n            event = {\n              type: EVENT_TYPE_SET,\n              nativeEvent: {}\n            };\n            _context.t0 = action;\n            _context.next = _context.t0 === DATE_SET_ACTION ? 15 : _context.t0 === TIME_SET_ACTION ? 20 : _context.t0 === NEUTRAL_BUTTON_ACTION ? 25 : _context.t0 === DISMISS_ACTION ? 28 : 28;\n            break;\n\n          case 15:\n            date.setFullYear(year, month, day);\n            date = timeZoneOffsetDateSetter(date, timeZoneOffsetInMinutes);\n            event.nativeEvent.timestamp = date.getTime();\n            onChange == null ? void 0 : onChange(event, date);\n            return _context.abrupt(\"break\", 31);\n\n          case 20:\n            date.setHours(hour, minute);\n            date = timeZoneOffsetDateSetter(date, timeZoneOffsetInMinutes);\n            event.nativeEvent.timestamp = date.getTime();\n            onChange == null ? void 0 : onChange(event, date);\n            return _context.abrupt(\"break\", 31);\n\n          case 25:\n            event.type = ANDROID_EVT_TYPE.neutralButtonPressed;\n            onChange == null ? void 0 : onChange(event, originalValue);\n            return _context.abrupt(\"break\", 31);\n\n          case 28:\n            event.type = ANDROID_EVT_TYPE.dismissed;\n            onChange == null ? void 0 : onChange(event, originalValue);\n            return _context.abrupt(\"break\", 31);\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t1 = _context[\"catch\"](0);\n            onError && onError(_context.t1);\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 33]], Promise);\n  };\n\n  presentPicker();\n}\n\nfunction dismiss(mode) {\n  pickers[mode].dismiss();\n}\n\nexport var DateTimePickerAndroid = {\n  open: open,\n  dismiss: dismiss\n};","map":{"version":3,"sources":["C:/www/CyberBunker/node_modules/@react-native-community/datetimepicker/src/DateTimePickerAndroid.js"],"names":["DATE_SET_ACTION","TIME_SET_ACTION","DISMISS_ACTION","NEUTRAL_BUTTON_ACTION","ANDROID_DISPLAY","ANDROID_MODE","ANDROID_EVT_TYPE","EVENT_TYPE_SET","invariant","getOpenPicker","timeZoneOffsetDateSetter","validateAndroidProps","pickers","open","props","mode","date","display","default","originalValue","value","is24Hour","minimumDate","maximumDate","neutralButtonLabel","minuteInterval","timeZoneOffsetInMinutes","onChange","onError","valueTimestamp","getTime","openPicker","presentPicker","action","day","month","year","minute","hour","Date","event","type","nativeEvent","setFullYear","timestamp","setHours","neutralButtonPressed","dismissed","dismiss","DateTimePickerAndroid"],"mappings":"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","sourcesContent":["/**\r\n * @format\r\n * @flow strict-local\r\n */\r\nimport {\r\n  DATE_SET_ACTION,\r\n  TIME_SET_ACTION,\r\n  DISMISS_ACTION,\r\n  NEUTRAL_BUTTON_ACTION,\r\n  ANDROID_DISPLAY,\r\n  ANDROID_MODE,\r\n  ANDROID_EVT_TYPE,\r\n  EVENT_TYPE_SET,\r\n} from './constants';\r\nimport invariant from 'invariant';\r\n\r\nimport type {DateTimePickerEvent, AndroidNativeProps} from './types';\r\nimport {\r\n  getOpenPicker,\r\n  timeZoneOffsetDateSetter,\r\n  validateAndroidProps,\r\n} from './androidUtils';\r\nimport pickers from './picker';\r\n\r\nfunction open(props: AndroidNativeProps) {\r\n  const {\r\n    mode = ANDROID_MODE.date,\r\n    display = ANDROID_DISPLAY.default,\r\n    value: originalValue,\r\n    is24Hour,\r\n    minimumDate,\r\n    maximumDate,\r\n    neutralButtonLabel,\r\n    minuteInterval,\r\n    timeZoneOffsetInMinutes,\r\n    onChange,\r\n    onError,\r\n  } = props;\r\n  validateAndroidProps(props);\r\n  invariant(originalValue, 'A date or time must be specified as `value` prop.');\r\n\r\n  const valueTimestamp = originalValue.getTime();\r\n  const openPicker = getOpenPicker({\r\n    mode,\r\n    value: valueTimestamp,\r\n    display,\r\n    is24Hour,\r\n    minimumDate,\r\n    maximumDate,\r\n    neutralButtonLabel,\r\n    minuteInterval,\r\n    timeZoneOffsetInMinutes,\r\n  });\r\n\r\n  const presentPicker = async () => {\r\n    try {\r\n      const {action, day, month, year, minute, hour} = await openPicker();\r\n      let date = new Date(valueTimestamp);\r\n      let event: DateTimePickerEvent = {\r\n        type: EVENT_TYPE_SET,\r\n        nativeEvent: {},\r\n      };\r\n\r\n      switch (action) {\r\n        case DATE_SET_ACTION:\r\n          date.setFullYear(year, month, day);\r\n          date = timeZoneOffsetDateSetter(date, timeZoneOffsetInMinutes);\r\n          event.nativeEvent.timestamp = date.getTime();\r\n          onChange?.(event, date);\r\n          break;\r\n\r\n        case TIME_SET_ACTION:\r\n          date.setHours(hour, minute);\r\n          date = timeZoneOffsetDateSetter(date, timeZoneOffsetInMinutes);\r\n          event.nativeEvent.timestamp = date.getTime();\r\n          onChange?.(event, date);\r\n          break;\r\n\r\n        case NEUTRAL_BUTTON_ACTION:\r\n          event.type = ANDROID_EVT_TYPE.neutralButtonPressed;\r\n          onChange?.(event, originalValue);\r\n          break;\r\n\r\n        case DISMISS_ACTION:\r\n        default:\r\n          event.type = ANDROID_EVT_TYPE.dismissed;\r\n          onChange?.(event, originalValue);\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      onError && onError(error);\r\n    }\r\n  };\r\n  presentPicker();\r\n}\r\n\r\nfunction dismiss(mode: AndroidNativeProps['mode']) {\r\n  // $FlowFixMe - `AbstractComponent` [1] is not an instance type.\r\n  pickers[mode].dismiss();\r\n}\r\n\r\nexport const DateTimePickerAndroid = {open, dismiss};\r\n"]},"metadata":{},"sourceType":"module"}