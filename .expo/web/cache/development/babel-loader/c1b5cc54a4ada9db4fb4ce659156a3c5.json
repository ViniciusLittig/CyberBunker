{"ast":null,"code":"import invariant from 'invariant';\nexport function toMilliseconds(options) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  keys.forEach(function each(key) {\n    var value = options[key];\n\n    if (Object.prototype.toString.call(value) === '[object Date]') {\n      options[key] = value.getTime();\n    }\n  });\n}\nexport function sharedPropsValidation(_ref) {\n  var value = _ref.value;\n  invariant(value, 'A date or time must be specified as `value` prop');\n  invariant(value instanceof Date, '`value` prop must be an instance of Date object');\n}","map":{"version":3,"sources":["C:/www/CyberBunker/node_modules/@react-native-community/datetimepicker/src/utils.js"],"names":["invariant","toMilliseconds","options","keys","forEach","each","key","value","Object","prototype","toString","call","getTime","sharedPropsValidation","Date"],"mappings":"AAKA,OAAOA,SAAP,MAAsB,WAAtB;AAKA,OAAO,SAASC,cAAT,CACLC,OADK,EAGL;AAAA,oCADGC,IACH;AADGA,IAAAA,IACH;AAAA;;AACAA,EAAAA,IAAI,CAACC,OAAL,CAAa,SAASC,IAAT,CAAcC,GAAd,EAAmB;AAC9B,QAAMC,KAAK,GAAGL,OAAO,CAACI,GAAD,CAArB;;AAIA,QAAIE,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,eAA9C,EAA+D;AAC7DL,MAAAA,OAAO,CAACI,GAAD,CAAP,GAAeC,KAAK,CAACK,OAAN,EAAf;AACD;AACF,GARD;AASD;AAED,OAAO,SAASC,qBAAT,OAAwD;AAAA,MAAxBN,KAAwB,QAAxBA,KAAwB;AAC7DP,EAAAA,SAAS,CAACO,KAAD,EAAQ,kDAAR,CAAT;AACAP,EAAAA,SAAS,CACPO,KAAK,YAAYO,IADV,EAEP,iDAFO,CAAT;AAID","sourcesContent":["/**\r\n * @format\r\n * @flow strict-local\r\n */\r\nimport type {DatePickerOptions, TimePickerOptions} from './types';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Convert a Date to a timestamp.\r\n */\r\nexport function toMilliseconds(\r\n  options: DatePickerOptions | TimePickerOptions,\r\n  ...keys: Array<string>\r\n) {\r\n  keys.forEach(function each(key) {\r\n    const value = options[key];\r\n\r\n    // Is it a valid Date object?\r\n    // $FlowFixMe: Cannot get `Object.prototype.toString` because property `toString` [1] cannot be unbound from the context [2] where it was defined.\r\n    if (Object.prototype.toString.call(value) === '[object Date]') {\r\n      options[key] = value.getTime();\r\n    }\r\n  });\r\n}\r\n\r\nexport function sharedPropsValidation({value}: {value: ?Date}) {\r\n  invariant(value, 'A date or time must be specified as `value` prop');\r\n  invariant(\r\n    value instanceof Date,\r\n    '`value` prop must be an instance of Date object',\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}